[{"C:\\Users\\YewonKim\\Desktop\\react-app\\src\\index.js":"1","C:\\Users\\YewonKim\\Desktop\\react-app\\src\\App.js":"2","C:\\Users\\YewonKim\\Desktop\\react-app\\src\\reportWebVitals.js":"3","C:\\Users\\YewonKim\\Desktop\\react-app\\src\\components\\ListBoardComponent.jsx":"4","C:\\Users\\YewonKim\\Desktop\\react-app\\src\\components\\HeaderComponent.jsx":"5","C:\\Users\\YewonKim\\Desktop\\react-app\\src\\components\\FooterComponent.jsx":"6","C:\\Users\\YewonKim\\Desktop\\react-app\\src\\service\\BoardService.js":"7","C:\\Users\\YewonKim\\Desktop\\react-app\\src\\components\\CreateBoardComponent.jsx":"8","C:\\Users\\YewonKim\\Desktop\\react-app\\src\\components\\ReadBoardComponent.jsx":"9","C:\\Users\\YewonKim\\Desktop\\react-app\\src\\components\\MapComponent.jsx":"10"},{"size":500,"mtime":499162500000,"results":"11","hashOfConfig":"12"},{"size":1530,"mtime":1611906476190,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"12"},{"size":6425,"mtime":1612144536401,"results":"15","hashOfConfig":"12"},{"size":2544,"mtime":1611817210203,"results":"16","hashOfConfig":"12"},{"size":508,"mtime":1611544479179,"results":"17","hashOfConfig":"12"},{"size":764,"mtime":1611901945677,"results":"18","hashOfConfig":"12"},{"size":4006,"mtime":1611713174715,"results":"19","hashOfConfig":"12"},{"size":4568,"mtime":1612230345945,"results":"20","hashOfConfig":"12"},{"size":6166,"mtime":1612163203811,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"4kns39",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"24"},"C:\\Users\\YewonKim\\Desktop\\react-app\\src\\index.js",[],["45","46"],"C:\\Users\\YewonKim\\Desktop\\react-app\\src\\App.js",[],"C:\\Users\\YewonKim\\Desktop\\react-app\\src\\reportWebVitals.js",[],"C:\\Users\\YewonKim\\Desktop\\react-app\\src\\components\\ListBoardComponent.jsx",["47","48","49","50","51","52","53"],"import React, { Component } from 'react';\r\nimport BoardService from '../service/BoardService';\r\n\r\n\r\nclass ListBoardComponent extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state={ \r\n            p_num:1,\r\n            category:props.match.params.category,\r\n            paging:{},\r\n            boards:[]\r\n            \r\n        }\r\n        this.createBoard = this.createBoard.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        BoardService.getBoards(this.state.category,this.state.p_num).then((res)=>{\r\n            this.setState({\r\n                p_num:res.data.pagingData.currentPageNum,\r\n                category:this.state.category,\r\n                paging:res.data.pagingData,\r\n                boards:res.data.list\r\n                \r\n            });\r\n        })\r\n    }\r\n\r\n    createBoard(){\r\n        this.props.history.push('/create-board/_create');\r\n    }\r\n    readBoard(num) {\r\n        this.props.history.push(`/read-board/${num}`);\r\n    }\r\n    mapBoard(category){\r\n        this.props.history.push(`/category-map/${category}`);\r\n    }\r\n\r\n    listBoard(category,p_num){\r\n        console.log(\"pageNum : \"+ p_num);\r\n        BoardService.getBoards(category,p_num).then((res)=>{\r\n            console.log(res.data);\r\n            this.setState({\r\n                p_num:res.data.pagingData.currentPageNum,\r\n                category:this.state.category,\r\n                paging:res.data.pagingData,\r\n                boards:res.data.list});\r\n        });\r\n        //this.props.history.push(`?p_num=${p_num}`);\r\n    }\r\n\r\n    returnDate(board_date) {\r\n        const dateString=board_date+\"\"\r\n        let y= dateString.split(\"T\"); //날짜 , 시간.00:00:00\r\n        let yymmdd= y[0];\r\n        let t=y[1]+\"\";\r\n        let tt=t.split(\".\");\r\n        let hhmmss=tt[0];\r\n        return (\r\n            <div className = \"row\">\r\n                <label> [ {yymmdd}, {hhmmss} ] </label>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    viewPaging(){\r\n        const pageNums =[];\r\n        for(let i = this.state.paging.pageNumStart;i <= this.state.paging.pageNumEnd; i++ ){\r\n            pageNums.push(i);\r\n        }\r\n        return(pageNums.map((page)=> \r\n        <li className=\"page-item\" key={page.toString()}>\r\n            <a className=\"page-link\" onClick={()=> this.listBoard(this.state.category,page)}>{page}</a>\r\n        </li>\r\n        ));\r\n    }\r\n\r\n    isPagingPrev(){\r\n        if(this.state.paging.prev){\r\n            return (\r\n                <li className=\"page-item\">\r\n                    <a className=\"page-link\" onClick={()=>this.listBoard((this.state.category,this.state.paging.currentPageNum-1))} tabIndex=\"-1\">Previous</a>\r\n                </li>\r\n            );\r\n        }\r\n    }\r\n\r\n    isPagingNext(){\r\n        if(this.state.paging.next){\r\n            return(\r\n                <li className=\"page-item\">\r\n                    <a className=\"page-link\" onClick={()=>this.listBoard((this.state.category,this.state.paging.currentPageNum+1))}tabIndex=\"-1\">Next</a>\r\n                </li>\r\n            );\r\n        }\r\n    }\r\n    isMoveToFirstPage() {\r\n        if (this.state.p_num !== 0) {//1\r\n            return (\r\n                <li className=\"page-item\">\r\n                    <a className=\"page-link\" onClick = {() => this.listBoard(this.state.category,1)} >Move to First Page</a>\r\n                </li>\r\n            );\r\n        }\r\n    }\r\n    isMoveToLastPage() {\r\n        if (this.state.p_num !== this.state.paging.pageNumCountTotal) {\r\n            return (\r\n                <li className=\"page-item\">\r\n                    <a className=\"page-link\" onClick = {() => this.listBoard( (this.state.category,this.state.paging.pageNumCountTotal) )} tabIndex=\"-1\">LastPage</a>\r\n                </li>\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2 className=\"text-center\">{this.state.category}  \r\n                <a onClick={()=> this.mapBoard(this.state.category)}>    지도</a>\r\n               </h2>\r\n\r\n                <div className=\"row\">\r\n                    <button className=\"btn btn-primary\" onClick={this.createBoard}>글 작성</button> \r\n                </div> \r\n\r\n                <div className=\"row\">\r\n                    <table className=\"table table-striped table-bordered\">\r\n                        <thead>\r\n                            <tr>\r\n                               \r\n                                <th>타이틀</th>\r\n                                <th>작성날짜</th>\r\n                                <th>좋아요</th>\r\n                                <th>작성자</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            \r\n                            {\r\n                                this.state.boards.map(\r\n                                    board=>\r\n                                    <tr key ={board.board_no}>\r\n                                        <td> <a onClick ={()=> this.readBoard(board.board_no)}>{board.title}</a></td>\r\n                                        <td>{this.returnDate(board.board_date)}</td> \r\n                                        <td>{board.board_like}</td>\r\n                                        <td>{board.id}</td>\r\n                            \r\n                                    </tr>\r\n                                )\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <div className=\"row\">\r\n                <nav aria-label=\"Page navigation example\">\r\n                        <ul className=\"pagination justify-content-center\">\r\n                            \r\n                            {\r\n                                this.isMoveToFirstPage()\r\n                            }\r\n                            {\r\n                                this.isPagingPrev()\r\n                            }\r\n                            {\r\n                                this.viewPaging()\r\n                            }\r\n                            {\r\n                                this.isPagingNext()\r\n                            }\r\n                            {\r\n                                this.isMoveToLastPage()\r\n                            }\r\n                        </ul>\r\n                    </nav>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ListBoardComponent;","C:\\Users\\YewonKim\\Desktop\\react-app\\src\\components\\HeaderComponent.jsx",[],"C:\\Users\\YewonKim\\Desktop\\react-app\\src\\components\\FooterComponent.jsx",[],"C:\\Users\\YewonKim\\Desktop\\react-app\\src\\service\\BoardService.js",[],"C:\\Users\\YewonKim\\Desktop\\react-app\\src\\components\\CreateBoardComponent.jsx",[],"C:\\Users\\YewonKim\\Desktop\\react-app\\src\\components\\ReadBoardComponent.jsx",[],"C:\\Users\\YewonKim\\Desktop\\react-app\\src\\components\\MapComponent.jsx",["54"],"import React, { Component } from 'react';\r\nimport BoardService from '../service/BoardService';\r\nimport styled from \"styled-components\";\r\n\r\n\r\n/*global kakao*/\r\nclass MapComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            p_num: 1,\r\n            category: props.match.params.category,\r\n            paging: {},\r\n            boards: []\r\n\r\n        }\r\n    }\r\n    listBoard(category) {\r\n        this.props.history.push(`/category-board/${category}`);\r\n    }\r\n\r\n    componentDidMount() {\r\n        BoardService.getBoards(this.state.category, this.state.p_num).then((res) => {\r\n            this.setState({\r\n                p_num: res.data.pagingData.currentPageNum,\r\n                category: this.state.category,\r\n                paging: res.data.pagingData,\r\n                boards: res.data.list\r\n\r\n            });\r\n        })\r\n        const script = document.createElement(\"script\");\r\n\r\n        script.async = true;\r\n        script.src = \"https://dapi.kakao.com/v2/maps/sdk.js?appkey=ce0d9fa1eadff889de8694feaee21b52&&autoload=false&libraries=services\";\r\n        document.head.appendChild(script);\r\n\r\n        script.onload = () => {\r\n            kakao.maps.load(() => {\r\n                let container = document.getElementById(\"MyMap\");\r\n                let options = {\r\n                    center: new kakao.maps.LatLng(37.506502, 127.053617),\r\n                    level: 7\r\n                };\r\n                const map = new window.kakao.maps.Map(container, options);\r\n\r\n                const ps = new window.kakao.maps.services.Places();\r\n\r\n\r\n                ps.keywordSearch(this.state.category, placesSearchCB);\r\n\r\n                // 키워드 검색 완료 시 호출되는 콜백함수 입니다\r\n                function placesSearchCB(data, status, pagination) {\r\n                    if (status === kakao.maps.services.Status.OK) {\r\n\r\n                        let bounds = new kakao.maps.LatLngBounds();\r\n\r\n                        for (let i = 0; i < data.length; i++) {\r\n                            displayMarkerKeyWord(data[i]);\r\n                            bounds.extend(new kakao.maps.LatLng(data[i].y, data[i].x));\r\n                        }\r\n\r\n                        //map.setBounds(bounds);\r\n                    }\r\n                }\r\n                //키워드 마커 표시 함수\r\n                function displayMarkerKeyWord(place) {\r\n                    let marker = new kakao.maps.Marker({\r\n                        map: map,\r\n                        position: new kakao.maps.LatLng(place.y, place.x)\r\n                    });\r\n                    var infowindow= new kakao.maps.InfoWindow({\r\n                        content :place.place_name\r\n                    });\r\n                    kakao.maps.event.addListener(\r\n                        marker,\r\n                        \"mouseover\",\r\n                        makeOverListener(map, marker, infowindow)\r\n                    );\r\n                    kakao.maps.event.addListener(\r\n                        marker,\r\n                        \"mouseout\",\r\n                        makeOutListener(infowindow)\r\n                    );\r\n                }\r\n                // 인포윈도우를 표시하는 클로저를 만드는 함수입니다\r\n                function makeOverListener(map, marker, infowindow) {\r\n                    return function () {\r\n                        infowindow.open(map, marker);\r\n                    };\r\n                }\r\n\r\n                // 인포윈도우를 닫는 클로저를 만드는 함수입니다\r\n                function makeOutListener(infowindow) {\r\n                    return function () {\r\n                        infowindow.close();\r\n                    };\r\n                }\r\n\r\n\r\n\r\n\r\n                if (navigator.geolocation) {\r\n                    // GeoLocation을 이용해서 접속 위치를 얻어옵니다.\r\n                    navigator.geolocation.getCurrentPosition(function (position) {\r\n\r\n                        var lat = position.coords.latitude, // 위도\r\n                            lon = position.coords.longitude; // 경도\r\n\r\n                        var locPostion = new kakao.maps.LatLng(lat, lon), //마커가 표시될 위치를 geolocation 좌표로 생성합니다.\r\n                            message = '<div style=\"padding:5px;\">여기에 계신가요?!</div>'; // 인포윈도우에 표시될 내용입니다.\r\n\r\n                        // 마커와 인포윈도우를 표시합니다.\r\n                        displayMarker(locPostion, message);\r\n                    });\r\n                } else {\r\n\r\n                }\r\n\r\n                // 지도에 마커와 인포윈도우를 표시하는 함수입니다.\r\n                function displayMarker(locPostion, message) {\r\n\r\n                    // 마커를 생성합니다.\r\n                    var marker = new kakao.maps.Marker({\r\n                        map: map,\r\n                        position: locPostion\r\n                    });\r\n\r\n                    var iwContent = message, // 인포윈도우에 표시할 내용\r\n                        iwRemoveable = true;\r\n\r\n                    // 인포윈도우를 생성합니다.\r\n                    var infowindow = new kakao.maps.InfoWindow({\r\n                        content: iwContent,\r\n                        removable: iwRemoveable\r\n                    });\r\n\r\n                    // 인포윈도우를 마커위에 표시합니다.\r\n                    infowindow.open(map, marker);\r\n\r\n                    // 지도 중심좌표를 접속위치로 변경합니다.\r\n                    map.setCenter(locPostion);\r\n                }\r\n\r\n            });\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2 className=\"text-center\"><a onClick={() => this.listBoard(this.state.category, 1)}>   {this.state.category}</a>  지도\r\n               </h2>\r\n                <MapComponents id=\"MyMap\">\r\n                    <div></div>\r\n                </MapComponents>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\nconst MapComponents = styled.div`\r\n  width: 1100px;\r\n  height: 600px;\r\n`;\r\n\r\nexport default MapComponent;",{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":74,"column":13,"nodeType":"61","endLine":74,"endColumn":94},{"ruleId":"59","severity":1,"message":"60","line":83,"column":21,"nodeType":"61","endLine":83,"endColumn":147},{"ruleId":"59","severity":1,"message":"60","line":93,"column":21,"nodeType":"61","endLine":93,"endColumn":146},{"ruleId":"59","severity":1,"message":"60","line":102,"column":21,"nodeType":"61","endLine":102,"endColumn":103},{"ruleId":"59","severity":1,"message":"60","line":111,"column":21,"nodeType":"61","endLine":111,"endColumn":154},{"ruleId":"59","severity":1,"message":"60","line":121,"column":17,"nodeType":"61","endLine":121,"endColumn":70},{"ruleId":"59","severity":1,"message":"60","line":145,"column":46,"nodeType":"61","endLine":145,"endColumn":96},{"ruleId":"59","severity":1,"message":"60","line":152,"column":45,"nodeType":"61","endLine":152,"endColumn":103},"no-native-reassign",["62"],"no-negated-in-lhs",["63"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]