[{"C:\\Users\\YewonKim\\Desktop\\react-app\\src\\index.js":"1","C:\\Users\\YewonKim\\Desktop\\react-app\\src\\App.js":"2","C:\\Users\\YewonKim\\Desktop\\react-app\\src\\reportWebVitals.js":"3","C:\\Users\\YewonKim\\Desktop\\react-app\\src\\components\\ListBoardComponent.jsx":"4","C:\\Users\\YewonKim\\Desktop\\react-app\\src\\components\\HeaderComponent.jsx":"5","C:\\Users\\YewonKim\\Desktop\\react-app\\src\\components\\FooterComponent.jsx":"6","C:\\Users\\YewonKim\\Desktop\\react-app\\src\\service\\BoardService.js":"7","C:\\Users\\YewonKim\\Desktop\\react-app\\src\\components\\CreateBoardComponent.jsx":"8","C:\\Users\\YewonKim\\Desktop\\react-app\\src\\components\\ReadBoardComponent.jsx":"9","C:\\Users\\YewonKim\\Desktop\\react-app\\src\\components\\MapComponent.jsx":"10","C:\\Users\\YewonKim\\Desktop\\react-app\\src\\components\\SuccessComponent.jsx":"11","C:\\Users\\YewonKim\\Desktop\\react-app\\src\\components\\PromotionComponent.jsx":"12"},{"size":500,"mtime":499162500000,"results":"13","hashOfConfig":"14"},{"size":1846,"mtime":1614131481532,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":499162500000,"results":"16","hashOfConfig":"14"},{"size":8668,"mtime":1614230150691,"results":"17","hashOfConfig":"14"},{"size":2669,"mtime":1614131433955,"results":"18","hashOfConfig":"14"},{"size":508,"mtime":1611544479179,"results":"19","hashOfConfig":"14"},{"size":1382,"mtime":1614230122042,"results":"20","hashOfConfig":"14"},{"size":11857,"mtime":1614236843285,"results":"21","hashOfConfig":"14"},{"size":7949,"mtime":1614139430681,"results":"22","hashOfConfig":"14"},{"size":15207,"mtime":1613717754151,"results":"23","hashOfConfig":"14"},{"size":441,"mtime":1612422928457,"results":"24","hashOfConfig":"14"},{"size":282,"mtime":1614133147550,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"4kns39",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"C:\\Users\\YewonKim\\Desktop\\react-app\\src\\index.js",[],["52","53"],"C:\\Users\\YewonKim\\Desktop\\react-app\\src\\App.js",[],"C:\\Users\\YewonKim\\Desktop\\react-app\\src\\reportWebVitals.js",[],"C:\\Users\\YewonKim\\Desktop\\react-app\\src\\components\\ListBoardComponent.jsx",["54","55","56","57","58","59","60","61","62"],"C:\\Users\\YewonKim\\Desktop\\react-app\\src\\components\\HeaderComponent.jsx",[],"C:\\Users\\YewonKim\\Desktop\\react-app\\src\\components\\FooterComponent.jsx",[],"C:\\Users\\YewonKim\\Desktop\\react-app\\src\\service\\BoardService.js",[],"C:\\Users\\YewonKim\\Desktop\\react-app\\src\\components\\CreateBoardComponent.jsx",[],"C:\\Users\\YewonKim\\Desktop\\react-app\\src\\components\\ReadBoardComponent.jsx",[],"C:\\Users\\YewonKim\\Desktop\\react-app\\src\\components\\MapComponent.jsx",["63","64","65","66","67","68"],"import React, { Component } from 'react';\r\nimport BoardService from '../service/BoardService';\r\nimport styled from \"styled-components\";\r\n\r\n\r\n/*global kakao*/\r\nclass MapComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            category: props.match.params.category,\r\n            //keyword:props.match.params.category\r\n        }\r\n        this.SearchKeywordhandler=this.SearchKeywordhandler.bind(this);\r\n        \r\n    }\r\n    listBoard(category) {\r\n        this.props.history.push(`/category-board/${category}`);\r\n    }\r\n\r\n    componentDidMount() {\r\n        BoardService.getBoards(this.state.category, this.state.p_num).then((res) => {\r\n            this.setState({\r\n                category: this.state.category,\r\n                //keyword:this.state.category\r\n            });\r\n        })\r\n        const script = document.createElement(\"script\");\r\n\r\n        script.async = true;\r\n        script.src = \"https://dapi.kakao.com/v2/maps/sdk.js?appkey=ce0d9fa1eadff889de8694feaee21b52&&autoload=false&libraries=services\";\r\n        document.head.appendChild(script);\r\n        var markers = [];\r\n\r\n        script.onload = () => {\r\n            kakao.maps.load(() => {\r\n                var container = document.getElementById(\"MyMap\");\r\n                let options = {\r\n                    center: new kakao.maps.LatLng(37.506502, 127.053617),\r\n                    level: 7\r\n                };\r\n                const map = new window.kakao.maps.Map(container, options);\r\n               \r\n                const ps = new window.kakao.maps.services.Places();\r\n                var infowindow = new kakao.maps.InfoWindow({ zIndex: 1 });\r\n               \r\n                searchPlaces(this.state.category);\r\n                function searchPlaces(keyword){\r\n                    //var keyword=document.getElementById('keyword').value;\r\n                   \r\n                    // this.setState({keyword:document.getElementById('keyword').value})\r\n                    \r\n                    ps.keywordSearch(keyword, placesSearchCB);\r\n\r\n                }\r\n               \r\n                // 키워드 검색 완료 시 호출되는 콜백함수 입니다\r\n                function placesSearchCB(data, status, pagination) {\r\n                    if (status === kakao.maps.services.Status.OK) {\r\n                        displayPlaces(data);\r\n\r\n                        // let bounds = new kakao.maps.LatLngBounds();\r\n\r\n                        // for (let i = 0; i < data.length; i++) {\r\n                        //     displayMarkerKeyWord(data[i]);\r\n                        //     bounds.extend(new kakao.maps.LatLng(data[i].y, data[i].x));\r\n                        // }\r\n                        //map.setBounds(bounds);\r\n                    }\r\n                }\r\n\r\n                function displayPlaces(places) {\r\n\r\n                    var listEl = document.getElementById('placesList'),\r\n                        menuEl = document.getElementById('menu_wrap'),\r\n                        fragment = document.createDocumentFragment(),\r\n                        bounds = new kakao.maps.LatLngBounds(),\r\n                        listStr = '';\r\n                    removeAllChildNods(listEl);\r\n                    removeMarker();\r\n\r\n                    for (var i = 0; i < places.length; i++) {\r\n                        // 마커를 생성하고 지도에 표시합니다\r\n                        var placePosition = new kakao.maps.LatLng(places[i].y, places[i].x),\r\n                            marker = addMarker(placePosition, i),\r\n                            itemEl = getListItem(i, places[i]); // 검색 결과 항목 Element를 생성합니다\r\n\r\n                        // 검색된 장소 위치를 기준으로 지도 범위를 재설정하기위해\r\n                        // LatLngBounds 객체에 좌표를 추가합니다\r\n                        bounds.extend(placePosition);\r\n\r\n                        // 마커와 검색결과 항목에 mouseover 했을때\r\n                        // 해당 장소에 인포윈도우에 장소명을 표시합니다\r\n                        // mouseout 했을 때는 인포윈도우를 닫습니다\r\n                        (function (marker, title) {\r\n                            kakao.maps.event.addListener(marker, 'mouseover', function () {\r\n                                displayInfowindow(marker, title);\r\n                            });\r\n\r\n                            kakao.maps.event.addListener(marker, 'mouseout', function () {\r\n                                infowindow.close();\r\n                            });\r\n\r\n                            itemEl.onmouseover = function () {\r\n                                displayInfowindow(marker, title);\r\n                            };\r\n\r\n                            itemEl.onmouseout = function () {\r\n                                infowindow.close();\r\n                            };\r\n                        })(marker, places[i].place_name);\r\n\r\n                        fragment.appendChild(itemEl);\r\n\r\n                    }\r\n                    // 검색결과 항목들을 검색결과 목록 Elemnet에 추가합니다\r\n\r\n\r\n                    listEl.appendChild(fragment);\r\n                    menuEl.scrollTop = 0;\r\n\r\n                    // 검색된 장소 위치를 기준으로 지도 범위를 재설정합니다\r\n                    //map.setBounds(bounds);\r\n\r\n                }\r\n                // 검색결과 항목을 Element로 반환하는 함수입니다\r\n                function getListItem(index, places) {\r\n\r\n                    var el = document.createElement('li'),\r\n                        itemStr = '<span class=\"markerbg marker_' + (index + 1) + '\"></span>' +\r\n                            '<div class=\"info\">' +\r\n                            '   <h5>' + (index + 1) +'. '+places.place_name +'</h5>';\r\n\r\n                    if (places.road_address_name) {\r\n                        itemStr += '    <span>' + places.road_address_name + '</span>' +\r\n                            '   <span class=\"jibun gray\">' + places.address_name + '</span>';\r\n                    } else {\r\n                        itemStr += '    <span>' + places.address_name + '</span>';\r\n                    }\r\n\r\n                    itemStr += '  <span class=\"tel\">' + places.phone + '</span>' +\r\n                        '</div>';\r\n\r\n                    el.innerHTML = itemStr;\r\n                    el.className = 'item';\r\n\r\n                    return el;\r\n                }\r\n                // 마커를 생성하고 지도 위에 마커를 표시하는 함수입니다\r\n                function addMarker(position, idx, title) {\r\n                    var imageSrc = 'https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_number_blue.png', // 마커 이미지 url, 스프라이트 이미지를 씁니다\r\n                        imageSize = new kakao.maps.Size(36, 37),  // 마커 이미지의 크기\r\n                        imgOptions = {\r\n                            spriteSize: new kakao.maps.Size(36, 691), // 스프라이트 이미지의 크기\r\n                            spriteOrigin: new kakao.maps.Point(0, (idx * 46) + 10), // 스프라이트 이미지 중 사용할 영역의 좌상단 좌표\r\n                            offset: new kakao.maps.Point(13, 37) // 마커 좌표에 일치시킬 이미지 내에서의 좌표\r\n                        },\r\n                        markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize, imgOptions),\r\n                        marker = new kakao.maps.Marker({\r\n                            position: position, // 마커의 위치\r\n                            image: markerImage\r\n                        });\r\n\r\n\r\n                    marker.setMap(map); // 지도 위에 마커를 표출합니다\r\n                    markers.push(marker);  // 배열에 생성된 마커를 추가합니다\r\n\r\n                    return marker;\r\n                }\r\n                // 지도 위에 표시되고 있는 마커를 모두 제거합니다\r\n                function removeMarker() {\r\n                    for (var i = 0; i < markers.length; i++) {\r\n                        markers[i].setMap(null);\r\n                    }\r\n                    markers = [];\r\n                }\r\n                // 검색결과 목록 하단에 페이지번호를 표시는 함수입니다\r\n                function displayPagination(pagination) {\r\n                    var paginationEl = document.getElementById('pagination'),\r\n                        fragment = document.createDocumentFragment(),\r\n                        i;\r\n\r\n                    // 기존에 추가된 페이지번호를 삭제합니다\r\n                    while (paginationEl.hasChildNodes()) {\r\n                        paginationEl.removeChild(paginationEl.lastChild);\r\n                    }\r\n\r\n                    for (i = 1; i <= pagination.last; i++) {\r\n                        var el = document.createElement('a');\r\n                        el.href = \"#\";\r\n                        el.innerHTML = i;\r\n\r\n                        if (i === pagination.current) {\r\n                            el.className = 'on';\r\n                        } else {\r\n                            el.onclick = (function (i) {\r\n                                return function () {\r\n                                    pagination.gotoPage(i);\r\n                                }\r\n                            })(i);\r\n                        }\r\n\r\n                        fragment.appendChild(el);\r\n                    }\r\n                    paginationEl.appendChild(fragment);\r\n                }\r\n                // 검색결과 목록 또는 마커를 클릭했을 때 호출되는 함수입니다\r\n                // 인포윈도우에 장소명을 표시합니다\r\n                function displayInfowindow(marker, title) {\r\n                    var content = '<div style=\"padding:5px;z-index:1;\">' + title + '</div>';\r\n\r\n                    infowindow.setContent(content);\r\n                    infowindow.open(map, marker);\r\n                }\r\n\r\n                // 검색결과 목록의 자식 Element를 제거하는 함수입니다\r\n                function removeAllChildNods(el) {\r\n\r\n                    while (el.hasChildNodes()) {\r\n                        el.removeChild(el.lastChild);\r\n                    }\r\n                }\r\n\r\n                //키워드 마커 표시 함수\r\n                function displayMarkerKeyWord(place) {\r\n                    let marker = new kakao.maps.Marker({\r\n                        map: map,\r\n                        position: new kakao.maps.LatLng(place.y, place.x)\r\n                    });\r\n                    var infowindow = new kakao.maps.InfoWindow({\r\n                        content: place.place_name\r\n                    });\r\n                    kakao.maps.event.addListener(\r\n                        marker,\r\n                        \"mouseover\",\r\n                        makeOverListener(map, marker, infowindow)\r\n                    );\r\n                    kakao.maps.event.addListener(\r\n                        marker,\r\n                        \"mouseout\",\r\n                        makeOutListener(infowindow)\r\n                    );\r\n                }\r\n                // 인포윈도우를 표시하는 클로저를 만드는 함수입니다\r\n                function makeOverListener(map, marker, infowindow) {\r\n                    return function () {\r\n                        infowindow.open(map, marker);\r\n                    };\r\n                }\r\n\r\n                // 인포윈도우를 닫는 클로저를 만드는 함수입니다\r\n                function makeOutListener(infowindow) {\r\n                    return function () {\r\n                        infowindow.close();\r\n                    };\r\n                }\r\n\r\n\r\n\r\n\r\n                if (navigator.geolocation) {\r\n                    // GeoLocation을 이용해서 접속 위치를 얻어옵니다.\r\n                    navigator.geolocation.getCurrentPosition(function (position) {\r\n\r\n                        var lat = position.coords.latitude, // 위도\r\n                            lon = position.coords.longitude; // 경도\r\n\r\n                        var locPostion = new kakao.maps.LatLng(lat, lon), //마커가 표시될 위치를 geolocation 좌표로 생성합니다.\r\n                            message = '<div style=\"padding:5px;\">여기에 계신가요?!</div>'; // 인포윈도우에 표시될 내용입니다.\r\n\r\n                        // 마커와 인포윈도우를 표시합니다.\r\n                        displayMarker(locPostion, message);\r\n                    });\r\n                } else {\r\n\r\n                }\r\n\r\n                // 지도에 마커와 인포윈도우를 표시하는 함수입니다.\r\n                function displayMarker(locPostion, message) {\r\n\r\n                    // 마커를 생성합니다.\r\n                    var marker = new kakao.maps.Marker({\r\n                        map: map,\r\n                        position: locPostion\r\n                    });\r\n\r\n                    var iwContent = message, // 인포윈도우에 표시할 내용\r\n                        iwRemoveable = true;\r\n\r\n                    // 인포윈도우를 생성합니다.\r\n                    var infowindow = new kakao.maps.InfoWindow({\r\n                        content: iwContent,\r\n                        removable: iwRemoveable\r\n                    });\r\n\r\n                    // 인포윈도우를 마커위에 표시합니다.\r\n                    infowindow.open(map, marker);\r\n\r\n                    // 지도 중심좌표를 접속위치로 변경합니다.\r\n                    map.setCenter(locPostion);\r\n                }\r\n\r\n            });\r\n        };\r\n    }\r\n    SearchKeywordhandler=(event)=>{\r\n       this.setState({keyword:event.target.value});\r\n    }\r\n    render() {\r\n        return (\r\n            <div >\r\n                <h2 className=\"text-center\"><a onClick={() => this.listBoard(this.state.category, 1)}>   {this.state.category}</a>  지도\r\n               </h2>\r\n                <div id=\"MyMap\" style={{  width: \"700px\", height: \"600px\", float: \"right\" }}>\r\n                   \r\n                </div>\r\n                <div id=\"menu_wrap\" style={{ backgroundColor: 'white', margin:'0px',float: \"left\", width:'400px',height:'600px',overflow:'scroll'}}>\r\n                        <div >\r\n                            <div className=\"form-group\">\r\n                                <form onsubmit=\"searchPlaces(); return false;\">\r\n                                    {/* 키워드 : <input type=\"text\" value={this.state.category} id=\"keyword\" size=\"15\" onChange={this.SearchKeywordhandler}/>\r\n                                    <button type=\"submit\" >검색하기</button> */}\r\n                                    \r\n                                </form>\r\n        </div>\r\n                        </div>\r\n                        <ul id=\"placesList\" style={{listStyleType:\"none\"}}></ul>\r\n                        <div id=\"pagination\"></div>\r\n                    </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n// const MapComponents = styled.div`\r\n//   width: 1100px;\r\n//   height: 600px;\r\n// `;\r\n\r\nexport default MapComponent;","C:\\Users\\YewonKim\\Desktop\\react-app\\src\\components\\SuccessComponent.jsx",[],"C:\\Users\\YewonKim\\Desktop\\react-app\\src\\components\\PromotionComponent.jsx",[],{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":80,"column":17,"nodeType":"75","endLine":80,"endColumn":100},{"ruleId":"76","severity":1,"message":"77","line":83,"column":36,"nodeType":"78","messageId":"79","endLine":83,"endColumn":38},{"ruleId":"73","severity":1,"message":"74","line":100,"column":21,"nodeType":"75","endLine":100,"endColumn":150},{"ruleId":"73","severity":1,"message":"74","line":110,"column":21,"nodeType":"75","endLine":110,"endColumn":150},{"ruleId":"73","severity":1,"message":"74","line":119,"column":21,"nodeType":"75","endLine":119,"endColumn":115},{"ruleId":"76","severity":1,"message":"80","line":147,"column":31,"nodeType":"78","messageId":"79","endLine":147,"endColumn":33},{"ruleId":"73","severity":1,"message":"74","line":149,"column":17,"nodeType":"75","endLine":149,"endColumn":71},{"ruleId":"73","severity":1,"message":"74","line":186,"column":21,"nodeType":"75","endLine":186,"endColumn":75},{"ruleId":"73","severity":1,"message":"74","line":210,"column":50,"nodeType":"75","endLine":210,"endColumn":100},{"ruleId":"81","severity":1,"message":"82","line":3,"column":8,"nodeType":"83","messageId":"84","endLine":3,"endColumn":14},{"ruleId":"81","severity":1,"message":"85","line":78,"column":25,"nodeType":"83","messageId":"84","endLine":78,"endColumn":32},{"ruleId":"86","severity":1,"message":"87","line":95,"column":26,"nodeType":"88","messageId":"89","endLine":111,"endColumn":26},{"ruleId":"81","severity":1,"message":"90","line":178,"column":26,"nodeType":"83","messageId":"84","endLine":178,"endColumn":43},{"ruleId":"81","severity":1,"message":"91","line":225,"column":26,"nodeType":"83","messageId":"84","endLine":225,"endColumn":46},{"ruleId":"73","severity":1,"message":"74","line":312,"column":45,"nodeType":"75","endLine":312,"endColumn":103},"no-native-reassign",["92"],"no-negated-in-lhs",["93"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-unused-vars","'styled' is defined but never used.","Identifier","unusedVar","'listStr' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'itemEl', 'itemEl'.","FunctionExpression","unsafeRefs","'displayPagination' is defined but never used.","'displayMarkerKeyWord' is defined but never used.","no-global-assign","no-unsafe-negation"]